services:
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - 9090:9090
    networks:
      - my_network
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
  pushgateway:
    image: prom/pushgateway
    container_name: pushgateway
    ports:
      - 9091:9091
    networks:
      - my_network
  postgres:
    image: postgres:15.6
    container_name: postgres
    ports:
      - 5432:5432
    networks:
      - my_network
    environment:
      - POSTGRES_PASSWORD=dash_admin
      - POSTGRES_USER=dash_admin
      - POSTGRES_DB=qpu_metrics
  temperature:
    build: temperature/.
    container_name: temperature
    environment:
      CRYO_NAME: ${CRYO_NAME}
      CRYO_IP: ${CRYO_IP}
      CRYO_PORT: ${CRYO_PORT}
    networks:
      - my_network
  grafana_setup:
    build: grafana/.
    container_name: grafana_setup
    depends_on:
      grafana:
        condition: service_healthy
    environment:
      GRAFANA_USERS: ${GRAFANA_USERS}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      QPU_CONFIG_JSON_PATH: ${QPU_CONFIG_JSON_PATH}
      QPU_CONFIG_JSON_PATH_CONTAINER: ${QPU_CONFIG_JSON_PATH_CONTAINER}
    volumes:
      - ${QPU_CONFIG_JSON_PATH}:${QPU_CONFIG_JSON_PATH_CONTAINER}:ro
    networks:
      - my_network
networks:
  my_network:
    driver: bridge
volumes:
  prometheus_data: {}
