services:
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      GF_INSTALL_PLUGINS: ${GF_INSTALL_PLUGINS}
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    networks:
      - my_network
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
  pushgateway:
    image: prom/pushgateway
    container_name: pushgateway
    networks:
      - my_network
  postgres:
    image: postgres:15.6
    container_name: postgres
    networks:
      - my_network
    environment:
      - POSTGRES_PASSWORD=dash_admin
      - POSTGRES_USER=dash_admin
      - POSTGRES_DB=qpu_metrics
  temperature:
    build: temperature/.
    container_name: temperature
    environment:
      CRYO_NAME: ${CRYO_NAME}
      CRYO_IP: ${CRYO_IP}
      CRYO_PORT: ${CRYO_PORT}
    networks:
      - my_network
  grafana_setup:
    build: grafana/.
    container_name: grafana_setup
    depends_on:
      grafana:
        condition: service_healthy
    environment:
      GRAFANA_USERS: ${GRAFANA_USERS}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      QPU_CONFIG_JSON_PATH: ${QPU_CONFIG_JSON_PATH}
      QPU_CONFIG_JSON_PATH_CONTAINER: /conf/qpu_config.json
    volumes:
      - ${QPU_CONFIG_JSON_PATH}:/conf/qpu_config.json:ro
    networks:
      - my_network
  remote_monitoring:
    build: remote_monitoring/.
    container_name: remote_monitoring
    environment:
      REMOTE_HOST: ${REMOTE_HOST}
      REMOTE_USERNAME: ${REMOTE_USERNAME}
      SSH_KEY_PASSWORD: ${SSH_KEY_PASSWORD}
      QIBOLAB_PLATFORMS_PATH: ${QIBOLAB_PLATFORMS_PATH}
      MONITORING_CONFIGURATION: ${MONITORING_CONFIGURATION}
    networks:
      - my_network
    volumes:
      - ~/.ssh:/root/.ssh:ro
networks:
  my_network:
    driver: bridge
volumes:
  prometheus_data: {}
